plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.8.3"
}

def mcVersion = stonecutter.current.version

version = "${property("mod_version")}+$mcVersion"
group = property("maven_group")

base {
	archivesName = property("mod_id")
}

stonecutter {
	swap("mod_id", "\"${property("mod_id")}\";")
	swap("mod_name", "\"${property("mod_name")}\";")

	def mcImport = "net.minecraft."
	def mcTarget = "Lnet/minecraft/"
	def fapiImport = "net.fabricmc.fabric.api"

	swap("modify_settings_target", eval(mcVersion, ">=1.20.1") ? "\"mapColor(${mcTarget}block/MapColor;)\"" : "\"of(${mcTarget}block/Material;)\"")
	swap("copy_state_function", eval(mcVersion, ">=1.20.6") ? "CopyStateLootFunction" : "CopyStateFunction")
	swap("identifier",			   eval(mcVersion, ">=1.21.1") ? "Identifier.of(MOD_ID, path);" : "new Identifier(MOD_ID, path);")
	swap("direction_property",     eval(mcVersion, ">=1.21.2") ? "EnumProperty<Direction>" : "DirectionProperty")

	def simpleParticleType = eval(mcVersion, ">=1.20.6") ? "SimpleParticleType" : "DefaultParticleType"

	swap("simple_particle_type", simpleParticleType)
	swap("simple_particle_type_str", "\"$simpleParticleType\"")

	swap("modify_settings_import", "${mcImport}block.${eval(mcVersion, ">=1.20.1") ? "MapColor" : "Material"}")
	swap("particle_util_import", "$mcImport${eval(mcVersion, ">=1.21.1") ? "particle." : "client.util."}ParticleUtil")
	swap("loot_table_event_import", fapiImport + ".loot." + (eval(mcVersion, ">=1.21.1") ? "v3" : "v2") + ".LootTableEvents")

	swap("particle_group_import") {
		def particleGroupImport = mcImport

		if (eval(mcVersion, "<1.21.1"))
			particleGroupImport += "client."

		particleGroupImport + "particle.ParticleGroup"
	}
	
	swap("append_tooltip_target") {
		def appendTooltipTarget = '"' + mcTarget

		if (eval(mcVersion, "<=1.20.4"))
			appendTooltipTarget += "item/Item;appendTooltip(%sitem/ItemStack;%<sworld/World;Ljava/util/List;%<sclient/item/TooltipContext;)V"
        else if (eval(mcVersion, "1.20.6"))
			appendTooltipTarget += "item/Item;appendTooltip(%sitem/ItemStack;%<sitem/Item\$TooltipContext;Ljava/util/List;%<sclient/item/TooltipType;)V"
		else if (eval(mcVersion, "<=1.21.4"))
			appendTooltipTarget += "item/Item;appendTooltip(%sitem/ItemStack;%<sitem/Item\$TooltipContext;Ljava/util/List;%<sitem/tooltip/TooltipType;)V"
		else
			appendTooltipTarget += "item/ItemStack;appendTooltip(%sitem/Item\$TooltipContext;%<scomponent/type/TooltipDisplayComponent;%<sentity/player/PlayerEntity;%<sitem/tooltip/TooltipType;Ljava/util/function/Consumer;)V"

		appendTooltipTarget += '"'

		appendTooltipTarget.formatted(mcTarget)
	}
}

publishMods {
	file = remapJar.archiveFile
	changelog = rootProject.file("CHANGELOG.md").text
	type = STABLE
	displayName = "${property("mod_name")} ${property("mod_version")} ($mcVersion) - ${property("update_name")}"
	modLoaders.add("fabric")
	version = property("mod_version")

	modrinth {
		accessToken = providers.gradleProperty("secrets.modrinth_token")
		projectId = property("modrinth_project_id")

		for (String version : property("modrinth_versions").toString().split(' '))
			minecraftVersions.add(version)

		requires {
			slug = "fabric-api"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:$mcVersion"
	mappings "net.fabricmc:yarn:${property("yarn_mappings")}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property("loader_version")}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${property("fabric_version")}"
}

def javaVersion = stonecutter.eval(mcVersion, ">=1.20.6") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
def javaVersionNumber = javaVersion.ordinal() + 1

tasks.register('copyBuild', Copy) {
	from("${layout.buildDirectory.get()}/libs")
	into("$rootDir/libs/${project.property("mod_version")}")
}

tasks.build.finalizedBy("copyBuild")

processResources {
	inputs.property("id", project.property("mod_id"))
	inputs.property("name", project.property("mod_name"))
	inputs.property("version", project.property("mod_version"))
	inputs.property("target", project.property("target_version"))
	inputs.property("java_version", javaVersionNumber)

	def map = [
		"id": project.property("mod_id"),
		"name": project.property("mod_name"),
		"version": project.property("mod_version"),
		"target": project.property("target_version"),
		"java_version": javaVersionNumber
	]

	filesMatching("fabric.mod.json") {
		expand map
	}

	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

clean {
	delete("$projectDir/src/main/generated")
}

if (stonecutter.eval(mcVersion, ">=1.21.4")) {
	fabricApi {
		configureDataGeneration() {
			client = true
		}
	}
}
else {
	fabricApi {
		configureDataGeneration()
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = javaVersionNumber
}

if (stonecutter.current.isActive) {
	rootProject.tasks.register("runActiveClient") {
		group = "fabric"
		dependsOn(tasks.named("runClient"))
	}

	loom {
		runs {
			client {
				programArgs(["--username", "axialeaa", "--uuid", "dabdffa7-fdd2-4798-9f94-a518c7856163"])
			}
		}
		runConfigs.all {
			ideConfigGenerated = true
			vmArgs("-Dmixin.debug.export=true")
			runDir "../../run"
		}
		sourceSets {
			main {
				resources {
					srcDir(project.file("src/main/generated"))
				}
			}
		}
	}
}

java {
	withSourcesJar()

	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

tasks.sourcesJar.duplicatesStrategy = DuplicatesStrategy.INCLUDE

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}