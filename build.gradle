plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
}

def mcVersion = stonecutter.current.version

version = property("mod_version") + "+" + mcVersion
group = property("maven_group")

base {
	archivesName = property("archives_base_name")
}

stonecutter {
	swap("random_import",		   eval(mcVersion, ">=1.19.2") ? "net.minecraft.util.math.random.Random" : "java.util.Random")
	swap("translatable",		   eval(mcVersion, ">=1.19.2") ? "Text::translatable" : "TranslatableText::new")
	swap("pack_name",			   eval(mcVersion, ">=1.19.3") ? "translated" : "String.valueOf(translated)")
	swap("register_sound",		   eval(mcVersion, ">=1.19.3") ? "Registry.register(Registries.SOUND_EVENT, id, SoundEvent.of(id));" : "Registry.register(Registry.SOUND_EVENT, id, new SoundEvent(id));")
	swap("modify_settings_target", eval(mcVersion, ">=1.20.1") ? "\"mapColor(Lnet/minecraft/block/MapColor;)\"" : "\"of(Lnet/minecraft/block/Material;)\"")
	swap("fifth_raycast_arg", 	   eval(mcVersion, ">=1.20.4") ? "ShapeContext.absent()" : "MinecraftClient.getInstance().player")
	swap("identifier",			   eval(mcVersion, ">=1.21.1") ? "Identifier.of(MOD_ID, name);" : "new Identifier(MOD_ID, name);")

	def netMc = "net.minecraft."

	swap("modify_settings_import", netMc + "block." + (eval(mcVersion, ">=1.20.1") ? "MapColor" : "Material"))
	swap("fifth_raycast_import",   netMc + (eval(mcVersion, ">=1.20.4") ? "block.ShapeContext" : "client.MinecraftClient"))

	def scheduleBlockTick

	if (eval(mcVersion, "1.17.1"))
		scheduleBlockTick = "world.getBlockTickScheduler().schedule(pos, thisBlock, delay);"
	else if (eval(mcVersion, "<=1.19.2"))
		scheduleBlockTick = "world.createAndScheduleBlockTick(pos, thisBlock, delay);"
	else scheduleBlockTick = "world.scheduleBlockTick(pos, thisBlock, delay);"

	swap("schedule_block_tick", scheduleBlockTick)

	def particleGroupImport = netMc

	if (eval(mcVersion, "<1.21.1"))
		particleGroupImport += "client."

	particleGroupImport += "particle.ParticleGroup"

	swap("particle_group_import", particleGroupImport)
}

dependencies {
	minecraft "com.mojang:minecraft:${mcVersion}"
	mappings "net.fabricmc:yarn:${property("yarn_mappings")}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property("loader_version")}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${property("fabric_version")}"
}

processResources {
	inputs.property("version", version)

	filesMatching("fabric.mod.json") {
		expand "version": version,
				"target": project.property("target_version")
	}
}

def javaVersion = stonecutter.eval(mcVersion, ">=1.20.6") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17

tasks.withType(JavaCompile).configureEach {
	it.options.release = javaVersion.ordinal() + 1
}

if (stonecutter.current.isActive) { // run configs for non-active version would be invalid
	loom {
		runConfigs.all {
			ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
			runDir "../../run" // use a global run directory for all versions
		}
	}
}

java {
	withSourcesJar()

	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}