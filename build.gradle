plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
}

def mcVersion = stonecutter.current.version

version = property("mod_version") + "+" + mcVersion
group = property("maven_group")

base {
	archivesName = property("archives_base_name")
}

stonecutter {
	swap("random_import", compare(mcVersion, "1.19.2") >= 0 ? "net.minecraft.util.math.random.Random;" : "java.util.Random;")
	swap("can_place_at_access_modifier", compare(mcVersion, "1.20.6") >= 0 ? "protected" : "public")
	swap("world_view_arg", compare(mcVersion, "1.19.3") >= 0 ? "WorldView" : "BlockView")
	swap("schedule_block_tick",
		compare(mcVersion, "1.17.1") == 0 ? "world.getBlockTickScheduler().schedule(pos, this, delay);" : // 1.17.1
		compare(mcVersion, "1.19.3") >= 0 ? "world.scheduleBlockTick(pos, this, delay);" : // 1.19.3+
		"world.createAndScheduleBlockTick(pos, this, delay);" // 1.18.2-1.19.2
	)
	swap("register", compare(mcVersion, "1.19.3") >= 0 ? "Registry.register(Registries.SOUND_EVENT, id, SoundEvent.of(id));" : "Registry.register(Registry.SOUND_EVENT, id, new SoundEvent(id));")
	swap("identifier", compare(mcVersion, "1.21") >= 0 ? "Identifier.of(MOD_ID, name);" : "new Identifier(MOD_ID, name);")
}

dependencies {
	minecraft "com.mojang:minecraft:${stonecutter.current.version}"
	mappings "net.fabricmc:yarn:${property("yarn_mappings")}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property("loader_version")}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${property("fabric_version")}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
				"target": project.property("target_version")
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

if (stonecutter.current.isActive) { // run configs for non-active version would be invalid
	loom {
		runConfigs.all {
			ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
			runDir "../../run" // use a global run directory for all versions
		}
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}