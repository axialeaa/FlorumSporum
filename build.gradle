plugins {
	id 'fabric-loom' version "$loom_version"
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

def mcVersion = property("build_version")

version = "${property("mod_version")}+$mcVersion"
group = property("maven_group")

base {
	archivesName = property("mod_id")
}

publishMods {
	file = remapJar.archiveFile
	changelog = rootProject.file("CHANGELOG.md").text
	type = STABLE
	displayName = "${property("mod_name")} ${property("mod_version")} ($mcVersion) - ${property("update_name")}"
	modLoaders.add("fabric")
	version = property("mod_version")

	github {
		accessToken = providers.gradleProperty("secrets.github_token")
		repository = property("repository")
		commitish = "master"
		tagName = property("mod_version")
	}

	modrinth {
		accessToken = providers.gradleProperty("secrets.modrinth_token")
		projectId = property("modrinth_project_id")

		for (String version : property("modrinth_versions").toString().split(' '))
			minecraftVersions.add(version)

		requires("fabric-api")
	}

	discord {
		webhookUrl = providers.gradleProperty("secrets.discord_webhook_url")
		username = property("mod_name")
		avatarUrl = property("avatar_url")
		content = changelog.map {it + "\n||@Announcement Ping||"}

		style {
			look = "MODERN"
			link = "BUTTON"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:$mcVersion"
	mappings "net.fabricmc:yarn:${property("yarn_mappings")}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property("loader_version")}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${property("fabric_version")}"
}

def javaVersion = JavaVersion.VERSION_21
def javaVersionNumber = javaVersion.ordinal() + 1

processResources {
	inputs.property("id", project.property("mod_id"))
	inputs.property("name", project.property("mod_name"))
	inputs.property("version", project.property("mod_version"))
	inputs.property("target", project.property("target_version"))
	inputs.property("java_version", javaVersionNumber)

	def map = [
		"id": project.property("mod_id"),
		"name": project.property("mod_name"),
		"version": project.property("mod_version"),
		"target": project.property("target_version"),
		"java_version": javaVersionNumber
	]

	filesMatching("fabric.mod.json") {
		expand map
	}

	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

clean {
	delete("$projectDir/src/main/generated")
}

fabricApi {
	configureDataGeneration() {
		client = true
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = javaVersionNumber
}

loom {
	runs {
		client {
			programArgs(["--username", "axialeaa", "--uuid", "dabdffa7-fdd2-4798-9f94-a518c7856163"])
		}
	}
	runConfigs.configureEach {
		ideConfigGenerated = true
		vmArgs("-Dmixin.debug.export=true")
		runDir "../../run"
	}
	sourceSets {
		main {
			resources {
				srcDir(project.file("src/main/generated"))
			}
		}
	}
}

java {
	withSourcesJar()

	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}